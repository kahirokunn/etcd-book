= はじめに

etcdは分散型のキーバリューストアです。
もともとは、複数のマシンが協調しながら1台ずつ再起動する際に合意を取るための仕組みとして、CoreOS社によって開発されていました。
etcdは手軽に分散合意の仕組みを実現できることから、いろいろなソフトウェアのバックエンドとして採用されました。
そしてKubernetesのバックエンドに採用されたことにより、広く注目されるようになり、コミュニティの規模も大きくなりました。
2018年12月にはCNCFに寄贈され、現在はオープンソースコミュニティにおいて活発に開発が進められています。

etcdには以下のような特徴があります。

 * 高可用性(High Availability)
 * 強い一貫性(Strong Consistency)

etcdは高可用な構成でクラスタを構築することができます。
例えば5台のサーバーを使ってetcdクラスタを構築した場合、最大2台のサーバーが故障したとしてもクラスタの機能を正常に提供し続けることが可能です。

etcdは強い一貫性モデルを採用しています。
これはetcdクラスタに対して何らかのデータの書き込みに成功すると、その後にそのデータを読み出した場合は必ず書き込んだ値が読み込まれるということです。
この特徴は当たり前に聞こえるかもしれませんが、分散キーバリューストアの中には強い一貫性を持たないものも存在します。
例えば結果整合性(Eventually Consistency)を持つデータベースは、書き込んだ値はそのうち反映されればよいという考えです。
その代わりにスケールアウトさせることで非常に高いパフォーマンスを実現することが可能になっています。
一方で強い一貫性モデルを採用しているetcdは、スケールアウトさせてパフォーマンスを向上させることはできません。

etcdはRaftと呼ばれる分散合意(Consensus)アルゴリズムに基づいて実装されています。
Raftでは、クラスタの中からリーダーを選出する方法、ログ(データの変更イベント)をクラスタ内のメンバーに複製する方法、
ネットワーク障害やメンバーの故障が発生したときにもそれらを安全におこなう方法が定められています。
このアルゴリズムを正しく実装することで、ネットワーク障害などが発生しても、リーダーがクラスタ内にたかだか1つしか存在しないこと、
ログの順序が入れ替わらないこと、データが不整合を起こさないことが保証されており、高い信頼性を実現することができます。
また、Raftは理解しやすいことを重視しており、Paxosなど他の分散合意アルゴリズムと比べてシンプルで実装しやすくなっています。

また、etcdはキーバリューの読み書きだけでなく、Watch(値の変更監視)、Lease(キーの有効期限)、Leader Electionなどの機能を提供しています。
これらの機能は分散システムを開発するときに非常に便利なものばかりです。

一方でetcdには不得意な分野もあります。
大きなデータは取り扱うことができず(クラスタ全体で扱えるデータサイズはデフォルトで2GB、最大8GB)、
メンバーの数を増やしても性能を向上させることはできないため、大容量のデータを高速に扱うような用途には向いていません。

===== 本書の構成

本書では、etcdをキーバリューストアとして利用する方法、
分散システムのバックエンドとして利用する方法
Go言語でプログラミングする方法を紹介します。

===== 対象読者

===== 前提条件

 * Go言語でプログラミングできる
 * Dockerの基本的な使い方がわかる
