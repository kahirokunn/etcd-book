= はじめに

etcdは分散型のキーバリューストアです。
もともとは複数のホスト間で協調しながらOSのアップグレードをおこなうための機能として、CoreOS社がContainer Linux用に開発していました。
2018年にCNCFに寄贈され、現在はオープンソースコミュニティにおいて開発が進められています。

etcdには以下のような特徴があります。

 * 高可用性(High Availability)
 * 強い一貫性(Strong Consistency)

etcdは高可用な構成でクラスタを構築することができます。
例えば5台のサーバーを使ってetcdクラスタを構築した場合、最大2台のサーバーが故障したとしてもクラスタの機能を正常に提供し続けることが可能です。

etcdは強い一貫性モデルを採用しています。
すなわち、etcdクラスタに対して何らかのデータの書き込みに成功すると、その後にそのデータを読み出した場合は必ず書き込んだ値が読み込まれるということです。
この特徴は当たり前に聞こえるかもしれませんが、分散キーバリューストアの中には強い一貫性を持たないものも存在します。
すなわち、書き込んだ値はそのうち反映されればよいと考え(結果整合性: Eventually Consistency)、その代わりにスケールアウトさせることで非常に高いパフォーマンスを実現することが可能になっています。

etcdはRaftと呼ばれる分散合意(Consensus)アルゴリズムに基づいて実装されています。
クラスタの中からリーダーを選出する方法、ログ(データの変更イベント)をクラスタ内のメンバーに複製する方法、
ネットワーク障害やメンバーの故障が発生したときにもリーダー選出やログの複製を安全におこなう方法を
リーダーがクラスタ内にたかだか1つしか存在しないこと、ログの順序が入れ替わらないこと、データが不整合を起こさないことが
保証されており、高い信頼性を。

また、etcdはキーバリューの読み書きだけでなく、Watch(値の変更監視)、Lease(キーの有効期限)、Leader Electionなどの機能を提供しています。
これらの機能は分散システムを開発するときに非常に便利なものばかりです。

以上のことから、etcdは
Kubernetesを始め、CoreDNS、Vault、Calicoなど数え切れないほどたくさんのシステムのバックエンドとして採用されています。

一方でetcdには不得意な分野もあります。
大きなデータは取り扱うことができず(クラスタ全体で扱えるデータサイズはデフォルトで2GB、最大8GB)、
メンバーの数を増やしても性能を向上させることはできないため、大容量のデータを高速に扱うような用途には向いていません。

===== 本書の構成

本書では、etcdをキーバリューストアとして利用する方法、
分散システムのバックエンドとして利用する方法
Go言語でプログラミングする方法を紹介します。

===== 対象読者

===== 前提条件

 * Go言語でプログラミングできる
 * Dockerでコンテナを立ち上げられる
